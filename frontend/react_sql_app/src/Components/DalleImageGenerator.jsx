import React, { useState, useEffect, useCallback } from "react";
import axios from "axios";
import CircularProgress from "@mui/material/CircularProgress";
import {
  Container,
  Grid2 as Grid,
  Typography,
  CssBaseline,
  Paper,
  Box,
  Checkbox,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  SelectChangeEvent,
  TextField,
  Button,
} from "@mui/material";

function DalleImageGenerator(props) {
  const { endpoint } = props;
  const [prompt, setPrompt] = useState("");
  const [imageUrl, setImageUrl] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  // Function to parse error message
  const parseErrorMessage = (errorString) => {
    try {
      let jsonString = errorString.replace(/^Error code: \d+ - /, "");
      jsonString = jsonString
        .replace(/'/g, '"') // Replace single quotes with double quotes
        .replace(/None/g, "null"); // Replace None with null
      const errorObj = JSON.parse(jsonString);
      return errorObj.error.message;
    } catch (e) {
      return "An unexpected error occurred";
    }
  };

  const fetchData = useCallback(async () => {
    setIsLoading(true);
    setError("");
    setImageUrl("");
    try {
      const response = await axios.post(endpoint, {
        prompt: prompt,
      });

      setImageUrl(response.data.imageUrl);
    } catch (error) {
      //setError(parseErrorMessage(error.response.data?.error));
      //setError(error.response.data.error);
      setError(error.response.data);
    } finally {
      setIsLoading(false);
    }
  }, [endpoint, prompt]);

  const fetchData_test = useCallback(async () => {
    setIsLoading(false);
    console.info("Testing");
  }, [endpoint]);

  useEffect(() => {
    setIsLoading(true);
    fetchData();
  }, [endpoint]);

  return (
    <Container sx={{ mt: "1px", width: "100%" }}>
      {!isLoading ? (
        <div className="center">
          <Box
            component="form"
            sx={{
              "& .MuiTextField-root": {
                m: 2,
              },
            }}
            noValidate
            autoComplete="off"
          >
            <TextField
              id="outlined-multiline-flexible"
              label="Enter your image prompt"
              multiline
              fullWidth
              maxRows={4}
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              sx={{ mt: "2px", width: "100%" }}
            />

            <Button
              variant="contained"
              type="button"
              onClick={fetchData}
              disabled={isLoading}
              sx={{ width: "25%", float: "right" }}
            >
              Generate Image
            </Button>
          </Box>

          <Box
            sx={{
              display: "flex",
              justifyContent: "center", // Horizontal centering
              alignItems: "center", // Vertical centering
              minHeight: "200px", // Optional: Set a height to see vertical centering
              width: "100%", // Optional: Full width or set a specific width like '500px'
              mt: 10,
            }}
          >
            {error ? (
              <Typography color="error" variant="body1" sx={{ fontSize: 30 }}>
                {error}
              </Typography>
            ) : (
              imageUrl && <img src={imageUrl} alt="Generated by DALLÂ·E" />
            )}
          </Box>
        </div>
      ) : (
        <div className="loader-container">
          <CircularProgress size={120} />
        </div>
      )}
    </Container>
  );
}

export default DalleImageGenerator;
